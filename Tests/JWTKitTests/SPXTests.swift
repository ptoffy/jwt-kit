import JWTKit
import XCTest

final class SPXTests: XCTestCase {
    func testSPXSigner() async throws {
        let privateKey = SPX.PrivateKey()
        let keyCollection = await JWTKeyCollection().addSPX(key: privateKey)

        let payload = TestPayload(
            sub: "vapor",
            name: "Foo",
            admin: false,
            exp: .init(value: .init(timeIntervalSince1970: 2_000_000_000))
        )

        let privateSigned = try await keyCollection.sign(payload)
        try await XCTAssertEqualAsync(await keyCollection.verify(privateSigned, as: TestPayload.self), payload)
    }

    func testSPXPEM() async throws {
        let seed: [UInt8] = Array("0123456789abcdef0123456789abcdef0123456789abcdef".utf8)

        let privateKey = try SPX.PrivateKey(seed: seed)

        let keyCollection = await JWTKeyCollection()
            .addSPX(key: privateKey, kid: "private")

        let payload = TestPayload(
            sub: "vapor",
            name: "Foo",
            admin: false,
            exp: .init(value: .init(timeIntervalSince1970: 2_000_000_000))
        )

        let privateSigned = try await keyCollection.sign(payload)
        try await XCTAssertEqualAsync(await keyCollection.verify(privateSigned, as: TestPayload.self), payload)
    }

    func testVerifyOutsideToken() async throws {
        let seed: [UInt8] = [
            0x3f, 0x00, 0xff, 0x1c, 0x9c, 0x5e, 0xaa, 0xfe, 0x09, 0xc3, 0x08, 0x0d,
            0xac, 0xc1, 0x83, 0x2b, 0x35, 0x8a, 0x40, 0xd5, 0xf3, 0x8c, 0xcb, 0x97,
            0xe3, 0xa6, 0xc1, 0xb3, 0xb7, 0x5f, 0x42, 0xab, 0x17, 0x34, 0xe6, 0x41,
            0x89, 0xe1, 0x57, 0x93, 0x12, 0x74, 0xdb, 0xbd, 0xb4, 0x28, 0xd0, 0xfb
        ]
        let key = try SPX.PrivateKey(seed: seed)

        let keyCollection = await JWTKeyCollection()
            .addSPX(key: key)

        let payload = TestPayload(
            sub: "vapor",
            name: "Foo",
            admin: false,
            exp: .init(value: .init(timeIntervalSince1970: 2_000_000_000))
        )

        try await XCTAssertEqualAsync(await keyCollection.verify(outsideToken, as: TestPayload.self), payload)
    }

    let spx128sPrivateKey = """
    -----BEGIN PRIVATE KEY-----
    Jyl8Ef+FbvH9voZx/Y0kM+VNs3SNYw/PqLX47eN5haokJW+Qx/7+5KAevFwGhDGR
    Q8DmXAf+gNKuOxQHmEOcMg==
    -----END PRIVATE KEY-----
    """

    let spx128sPublicKey = """
    -----BEGIN PUBLIC KEY-----
    JCVvkMf+/uSgHrxcBoQxkUPA5lwH/oDSrjsUB5hDnDI=
    -----END PUBLIC KEY-----
    """

    let outsideToken = """
    eyJhbGciOiJTUEhJTkNTKzEyOHMiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJ2YXBvciIsIm5hbWUiOiJGb28iLCJhZG1pbiI6ZmFsc2UsImV4cCI6MjAwMDAwMDAwMH0.
    """
}
